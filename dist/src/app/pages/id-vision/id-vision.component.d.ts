import { AfterViewInit, ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { AlertController, IonInput, LoadingController, ModalController, NavController, Platform, ToastController } from '@ionic/angular';
import { DpiService } from './services/dpi/dpi-service.service';
import { ModalDpiServices } from './services/modal-services/modal-dpi-services';
import { SdkCommunicationService } from './services/modal-services/sdk-communication-services';
import { SwiperContainer } from './../../../swiper-wrapper';
import * as i0 from "@angular/core";
export declare class IdVisionComponent implements OnInit, AfterViewInit, OnDestroy {
    private modalController;
    private dpiService;
    private alertController;
    private loadingController;
    private platform;
    private modalDpiServices;
    private sdkCommunicationService;
    private navController;
    private cdRef;
    private toastController;
    dpi: IonInput;
    private isAndroid;
    private isIOS;
    tutoImage1: string;
    tutoImage2: string;
    tutoImage3: string;
    tutoImage4: string;
    constructor(modalController: ModalController, dpiService: DpiService, alertController: AlertController, loadingController: LoadingController, platform: Platform, modalDpiServices: ModalDpiServices, sdkCommunicationService: SdkCommunicationService, navController: NavController, cdRef: ChangeDetectorRef, toastController: ToastController);
    swiperElement: import("@angular/core").WritableSignal<SwiperContainer | null>;
    private modalRef;
    isSwipe: boolean;
    dpiCode: string;
    connection: string;
    apikey: string;
    validationConfig: any[];
    showDebug: boolean;
    versionSDK: string;
    hasInternet: boolean;
    validateMetaG: {
        acuerdoVideo: boolean;
        dpiFront: boolean;
        dpiBack: boolean;
        videoSelfie: boolean;
        photoSelfie: boolean;
    };
    swiperRef: any;
    simpleProcess: boolean;
    showAcuerdoVideo: boolean;
    showDpiFront: boolean;
    showDpiBack: boolean;
    showVideoSelfie: boolean;
    showPhotoSelfie: boolean;
    isValid: boolean;
    loadMockValidationConfig(): Promise<void>;
    handleClose(): void;
    getStepAction(type: number): () => void;
    setValidationConfig(): void;
    ngOnInit(): Promise<void>;
    ngAfterViewInit(): void;
    ngOnDestroy(): Promise<void>;
    handleClick(): void;
    handleSlide(slide: number): Promise<void>;
    handleGetInit(): void;
    handleExit(): void;
    isAllValid(): boolean;
    updateValidation(): void;
    handleSkipTutorial(): void;
    handleNext(): void;
    moveToNextStep(currentType: number): void;
    InitProccess(): Promise<void>;
    DpiFrontProccess(filePath: File): Promise<void>;
    closeModalFromParent(): void;
    closeModalVideoSelfie(): void;
    closeModalAcuerdoVideo(): void;
    resumePhotoFromParent(): void;
    resumeCameraFromParent(): void;
    closePhotoSelfieFromParent(): void;
    convertImagePathToFile(imagePath: string, fileName: string): Promise<File>;
    DpiBackProccess(filePath: File): Promise<void>;
    VideoSelfieProcccess(file: File): Promise<void>;
    validateDPIFront(filePath: File): Promise<boolean>;
    private showAlert;
    openCameraOverlayFrontal(): Promise<void>;
    closeOverlay(): Promise<void>;
    closeModalOverlay(): Promise<void>;
    closePhotoSelfie(): Promise<void>;
    validateDPIBack(filePath: File): Promise<boolean>;
    openCameraOverlayTrasero(): Promise<void>;
    getBackModal(file: File): Promise<void>;
    photoVideoSelfieFile(filePath: File): Promise<void>;
    getAcuerdoVideo(file: File): Promise<void>;
    openAcuerdoVideo(): Promise<void>;
    openVideoSelfie(): Promise<void>;
    openPhotoSelfie(): Promise<void>;
    openSimpleAcuerdo(): Promise<void>;
    copyProccess(): Promise<void>;
    copiarTexto(texto: string): Promise<void>;
    static ɵfac: i0.ɵɵFactoryDeclaration<IdVisionComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IdVisionComponent, "app-id-vision", never, { "isSwipe": { "alias": "isSwipe"; "required": false; }; "dpiCode": { "alias": "dpiCode"; "required": false; }; "connection": { "alias": "connection"; "required": false; }; "apikey": { "alias": "apikey"; "required": false; }; "validationConfig": { "alias": "validationConfig"; "required": false; }; }, {}, never, never, true, never>;
}
